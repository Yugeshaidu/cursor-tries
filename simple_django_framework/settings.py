"""
Django settings for simple_django_framework project.

This file is the CONTROL CENTER of your Django project! 🎛️
Think of it as the dashboard of a car - it controls how everything works.

Generated by 'django-admin startproject' using Django 5.2.4.

For more information on this file, see:
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see:
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

# Import the Path class to handle file system paths in a cross-platform way
# This works on Windows, Mac, and Linux! 🌍
from pathlib import Path
import os  # Import os for operating system interface functions

# Build paths inside the project like this: BASE_DIR / 'subdir'.
# BASE_DIR is the ROOT folder of your Django project 📁
# It's like the "home address" of your project
BASE_DIR = Path(__file__).resolve().parent.parent

# Create a logs directory if it doesn't exist 📝
# This is where we'll store all our error messages and activity logs
LOGS_DIR = BASE_DIR / 'logs'
LOGS_DIR.mkdir(exist_ok=True)  # Create the directory if it doesn't exist

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret! 🔐
# This is like a password for your Django project - keep it safe!
# In production, this should be stored in environment variables, not in code
SECRET_KEY = 'django-insecure-gn$^7@d!gg&^mguiw5!ai4m(&+ruq1wy=jgfgi)-d_r&ia+&7p'

# SECURITY WARNING: don't run with debug turned on in production! ⚠️
# DEBUG=True shows detailed error pages - helpful for development
# but dangerous in production because it reveals sensitive information
DEBUG = True

# List of host/domain names that this Django site can serve 🌐
# Empty list means only localhost (127.0.0.1) is allowed
# In production, add your domain name here like ['mydomain.com']
ALLOWED_HOSTS = []

# Application definition 📱
# This list tells Django which "apps" (features) are part of your project

INSTALLED_APPS = [
    # Built-in Django apps (these come free with Django!) 🎁
    'django.contrib.admin',        # Admin panel - like a control room for your data
    'django.contrib.auth',         # User authentication - login/logout system
    'django.contrib.contenttypes', # Content type framework - tracks your models
    'django.contrib.sessions',     # Session framework - remembers user data
    'django.contrib.messages',     # Messaging framework - for notifications
    'django.contrib.staticfiles',  # Static files management - CSS, JS, images
    
    # Your custom apps go here! 🏗️
    'main_app',  # This is the app we created - add it so Django knows about it
]

# Middleware stack 🥪
# Think of middleware as layers in a sandwich - each request passes through them
# They process requests BEFORE they reach your views, and responses AFTER

MIDDLEWARE = [
    # Security middleware - adds security headers to responses 🛡️
    'django.middleware.security.SecurityMiddleware',
    
    # Session middleware - handles user sessions (login status, etc.) 👤
    'django.contrib.sessions.middleware.SessionMiddleware',
    
    # Common middleware - handles URL rewriting and other common tasks 🔧
    'django.middleware.common.CommonMiddleware',
    
    # CSRF protection - prevents Cross-Site Request Forgery attacks 🛡️
    'django.middleware.csrf.CsrfViewMiddleware',
    
    # Authentication middleware - associates users with requests 🔐
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    
    # Messages middleware - enables the messaging framework 💬
    'django.contrib.messages.middleware.MessageMiddleware',
    
    # Clickjacking protection - prevents your site from being embedded in frames 🛡️
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# Root URL configuration 🗺️
# This tells Django where to find your main URL routing file
# It's like the main directory of your website
ROOT_URLCONF = 'simple_django_framework.urls'

# Template engine configuration 🎨
# Templates are HTML files with special Django tags for dynamic content

TEMPLATES = [
    {
        # Use Django's built-in template engine 🏭
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        
        # Directories to search for templates 📁
        # Empty means it will look in each app's 'templates' folder
        'DIRS': [],
        
        # Look for templates in each app's directory? Yes! ✅
        'APP_DIRS': True,
        
        # Additional options for the template engine ⚙️
        'OPTIONS': {
            # Context processors add variables to ALL templates automatically 🎁
            'context_processors': [
                # Makes 'request' object available in templates 📝
                'django.template.context_processors.request',
                # Makes user authentication info available 👤
                'django.contrib.auth.context_processors.auth',
                # Makes messages available in templates 💬
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

# WSGI application - how your Django app talks to web servers 🌐
# WSGI = Web Server Gateway Interface
WSGI_APPLICATION = 'simple_django_framework.wsgi.application'

# Database configuration 🗄️
# This tells Django how to connect to your database
# SQLite is perfect for development - it's just a file!

DATABASES = {
    # The default database connection 🔌
    'default': {
        # SQLite engine - simple file-based database, perfect for learning! 📁
        'ENGINE': 'django.db.backends.sqlite3',
        # Database file location - it will be created in your project root 📍
        'NAME': BASE_DIR / 'db.sqlite3',
    }
    # You can add more databases here if needed:
    # 'users_db': { ... },
    # 'analytics_db': { ... },
}

# Password validation rules 🔒
# These rules make sure users create strong passwords

AUTH_PASSWORD_VALIDATORS = [
    {
        # Don't allow passwords too similar to user information 👤
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        # Require minimum password length (default: 8 characters) 📏
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        # Don't allow common passwords like "password123" 🚫
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        # Don't allow passwords that are entirely numeric 🔢
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization settings 🌍
# These settings control language and localization

# Default language for your site 🗣️
LANGUAGE_CODE = 'en-us'

# Default timezone for your site 🕐
# UTC is recommended for international applications
TIME_ZONE = 'UTC'

# Enable Django's translation system? Yes! 🌐
# This allows you to translate your site into multiple languages
USE_I18N = True

# Use timezone-aware datetime objects? Yes! ⏰
# This ensures proper handling of different timezones
USE_TZ = True

# Static files configuration (CSS, JavaScript, Images) 🎨
# URL prefix for static files - appears in URLs like /static/css/style.css
STATIC_URL = 'static/'

# Directory where collected static files will be stored 📁
# Used when you run 'python manage.py collectstatic'
STATIC_ROOT = BASE_DIR / 'staticfiles'

# Additional directories to search for static files 🔍
STATICFILES_DIRS = [
    BASE_DIR / 'static',  # Look for static files in project root 'static' folder
]

# Media files configuration (user-uploaded files) 📸
# URL prefix for media files - appears in URLs like /media/uploads/photo.jpg
MEDIA_URL = 'media/'

# Directory where uploaded files will be stored 📁
MEDIA_ROOT = BASE_DIR / 'media'

# Default primary key field type 🔑
# This sets the default type for auto-generated ID fields
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# LOGGING CONFIGURATION 📝
# This is the complete logging setup for tracking errors and activity!

LOGGING = {
    # Version of logging configuration schema (always 1) 🔢
    'version': 1,
    
    # Don't disable existing loggers ✅
    'disable_existing_loggers': False,
    
    # Formatters define how log messages look 🎨
    'formatters': {
        # Verbose format - includes lots of details 📋
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',  # Use new-style string formatting
        },
        # Simple format - just level, time, and message 🎯
        'simple': {
            'format': '{levelname} {asctime} {message}',
            'style': '{',
        },
    },
    
    # Handlers determine WHERE log messages go 📍
    'handlers': {
        # Send ERROR and CRITICAL messages to a file 📁
        'file_error': {
            'level': 'ERROR',  # Only errors and critical messages
            'class': 'logging.FileHandler',  # Write to a file
            'filename': LOGS_DIR / 'error.log',  # Error log file location
            'formatter': 'verbose',  # Use detailed formatting
        },
        
        # Send all messages to a general log file 📄
        'file_general': {
            'level': 'INFO',  # Info, warning, error, and critical messages
            'class': 'logging.handlers.RotatingFileHandler',  # Rotating file handler
            'filename': LOGS_DIR / 'django.log',  # General log file location
            'maxBytes': 1024*1024*10,  # 10 MB max file size
            'backupCount': 5,  # Keep 5 backup files
            'formatter': 'verbose',  # Use detailed formatting
        },
        
        # Send messages to console/terminal 💻
        'console': {
            'level': 'DEBUG',  # All message levels
            'class': 'logging.StreamHandler',  # Print to console
            'formatter': 'simple',  # Use simple formatting
        },
    },
    
    # Root logger configuration 🌳
    'root': {
        'level': 'INFO',  # Log info level and above
        'handlers': ['console', 'file_general'],  # Send to console and file
    },
    
    # Specific loggers for different parts of Django 🎯
    'loggers': {
        # Django framework messages 🏗️
        'django': {
            'handlers': ['console', 'file_general', 'file_error'],
            'level': 'INFO',
            'propagate': False,  # Don't pass to parent loggers
        },
        
        # Django request processing 🌐
        'django.request': {
            'handlers': ['file_error'],  # Log request errors to file
            'level': 'ERROR',
            'propagate': False,
        },
        
        # Your custom app logging 🏗️
        'main_app': {
            'handlers': ['console', 'file_general'],
            'level': 'DEBUG',
            'propagate': False,
        },
    },
}

# Development-specific settings 🛠️
if DEBUG:
    # In development, also log SQL queries for debugging 🔍
    LOGGING['loggers']['django.db.backends'] = {
        'level': 'DEBUG',
        'handlers': ['console'],
        'propagate': False,
    }

# Email configuration (for error notifications) 📧
# Configure this to receive email notifications for serious errors
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'  # Print emails to console
# For production, use SMTP:
# EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
# EMAIL_HOST = 'smtp.gmail.com'
# EMAIL_PORT = 587
# EMAIL_USE_TLS = True
# EMAIL_HOST_USER = 'your-email@gmail.com'
# EMAIL_HOST_PASSWORD = 'your-password'

# Admin notification settings 👑
# Django will email these addresses when there's a serious error
ADMINS = [
    # ('Your Name', 'your-email@example.com'),
]

# Manager notification settings 👥
# Managers get email about broken links
MANAGERS = ADMINS

# Security settings (additional) 🛡️
if not DEBUG:
    # Production security settings
    SECURE_BROWSER_XSS_FILTER = True  # Enable XSS filter
    SECURE_CONTENT_TYPE_NOSNIFF = True  # Prevent MIME sniffing
    X_FRAME_OPTIONS = 'DENY'  # Prevent clickjacking
    SECURE_HSTS_SECONDS = 31536000  # HTTP Strict Transport Security
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = True

# Cache configuration 🚀
# Caching makes your website faster by storing frequently used data
CACHES = {
    'default': {
        # Use local memory cache for development 💾
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
        'LOCATION': 'unique-snowflake',
    }
}

# Session configuration 🍪
# How Django handles user sessions (login status, shopping cart, etc.)
SESSION_ENGINE = 'django.contrib.sessions.backends.db'  # Store sessions in database
SESSION_COOKIE_AGE = 86400  # Session expires after 1 day (86400 seconds)
SESSION_SAVE_EVERY_REQUEST = True  # Update session on every request

print("🚀 Django settings loaded successfully!")
print(f"📁 Project directory: {BASE_DIR}")
print(f"📝 Logs directory: {LOGS_DIR}")
print(f"🔧 Debug mode: {DEBUG}")
print("✅ All systems ready to go!")
